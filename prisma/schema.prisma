generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Series {
  serie_id        Int               @id @default(autoincrement())
  serie_name      String            @unique
  is_featured     Boolean           @default(false)
  poster          String?
  seriesOrder     SerieOrder[]
  animes          Anime[]
  seriesOrderItem SeriesOrderItem[]
}

model Anime {
  anime_id         Int               @id @default(autoincrement())
  serie_id         Int
  title            String            @unique
  description      String?           @default("No description available yet. Check back later!")
  release_date     DateTime?
  is_dubbed        Boolean           @default(false)
  optional         Boolean           @default(false)
  poster           String?
  banner           String?
  type             AnimeType
  genres           Genre[]
  series           Series            @relation(fields: [serie_id], references: [serie_id])
  episodes         Episode[]
  animeGenre       AnimeGenre[]
  seriesOrderItems SeriesOrderItem[]
}

enum AnimeType {
  TV
  Movie
  OVA
  ONA
  Special
}

model Genre {
  genre_id   Int          @id @default(autoincrement())
  genre_name String       @unique
  count      Int          @default(0)
  animes     Anime[]
  animeGenre AnimeGenre[]
}

model SerieOrder {
  order_id         Int               @id @default(autoincrement())
  serie_id         Int
  order_type       OrderType
  series           Series            @relation(fields: [serie_id], references: [serie_id])
  seriesOrderItems SeriesOrderItem[]
}

enum OrderType {
  Release
  Chronological
  Community
}

model Episode {
  anime_id       Int
  episode_number Int
  is_filler      Boolean @default(false)
  anime          Anime   @relation(fields: [anime_id], references: [anime_id])

  @@id([anime_id, episode_number])
}

model AnimeGenre {
  anime_id Int
  genre_id Int
  anime    Anime @relation(fields: [anime_id], references: [anime_id])
  genre    Genre @relation(fields: [genre_id], references: [genre_id])

  @@id([anime_id, genre_id])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  role          Role      @default(USER)
  name          String?
  username      String    @unique
  password      String
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
}

enum Role {
  USER
  ADMIN
}

model SeriesOrderItem {
  series_order_item_id Int        @id @default(autoincrement())
  order_id             Int        @map("order_id")
  serie_id             Int        @map("serie_id")
  anime_id             Int        @map("anime_id")
  order                Int
  fromEpisode          Int        @map("from_episode")
  toEpisode            Int        @map("to_episode")
  series               Series     @relation(fields: [serie_id], references: [serie_id])
  anime                Anime      @relation(fields: [anime_id], references: [anime_id])
  serieOrder           SerieOrder @relation(fields: [order_id], references: [order_id])

  @@map(name: "SeriesOrderItem")
}
